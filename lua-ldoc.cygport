NAME="lua-ldoc"
VERSION=1.4.6
RELEASE=1
CATEGORY="Lua"
SUMMARY="A Lua Documentation Tool"
DESCRIPTION="\
LDoc is a LuaDoc-compatible documentation generator which can also
process C extension source. Markdown may be optionally used to
render comments, as well as integrated readme documentation and
pretty-printed example files
"
HOMEPAGE="https://stevedonovan.github.io/ldoc/"

GIT_REPO="https://github.com/lunarmodules/LDoc"
declare -A GIT_DATEHASH_BY_NAME=(
  # git log --date=iso-strict --format='%cd/%H' -1
  [1.4.6p51]=2021-05-10T20:16:55+03:00/147951025b6e55017c338c2d763bcc722f44bd6a
  [1.4.6]=2016-11-07T09:20:55-05:00/1.4.6
)
REV_HASH="${GIT_DATEHASH_BY_NAME[${VERSION}]#*/}"
REV_DATE="${GIT_DATEHASH_BY_NAME[${VERSION}]%%/*}"
REV_DATE_SHORT="${REV_DATE%%T*}"
GIT_BASENAME="${GIT_REPO##*/}"
SRC_URI="${GIT_REPO}/archive/${REV_HASH}/${GIT_BASENAME}-${VERSION}.tar.gz"
SRC_DIR="${GIT_BASENAME}-${REV_HASH#v}"

ARCH="noarch"

################################
LUA_VERSIONS="5.3:5.4"
LUA_PKG_NAME="${NAME#lua-}"
source lua.experiment

################################
## Patch files
################################
# Patch filenames are in a default style of 'git format-patch'
PATCH_URI=$(\
  find -maxdepth 1 -type f -name '[0-9][0-9][0-9][0-9]-*.patch' \
  | sort \
)
# Additional patches, if any
PATCH_URI+="
"

################################
## Requirements for building
################################
BUILD_REQUIRES="\
  lua53-devel\
  lua53-markdown\
  lua53-pl\
\
  lua54-devel\
  lua54-markdown\
  lua54-pl\
"
# TEST_REQUIRES="\
# "

################################
ABI=0


################################
_CYGPORT_RESTRICT_postinst_doc_=1

set_packages_lua() {
  __add_pkg "lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}"
  __set_pkg_property . CONTENTS "
    usr/share/doc/lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}/
    usr/*/lua/${LUA_VERSION}/
  "
  __set_pkg_property . REQUIRES "lua${LUA_VERSION_CYG}"

  __append_pkg_property . CONTENTS "
    usr/bin/*-${LUA_VERSION}
    etc/p*/lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}.sh
  "
}

set_packages_lua_versions ${LUA_VERSIONS} ${LUA_PKG_NAME}

################################
src_compile_lua() {
  mkdir -p ${B}/${LUA_VERSION}
  cd  ${B}/${LUA_VERSION}

  lndirs ${S} .

  lua_fix_shebang_version_print ${LUA_VERSION} ldoc.lua > ldoc-${LUA_VERSION}
  chmod 755 ldoc-${LUA_VERSION}
}

################################
src_install_lua() {
  cd ${B}/${LUA_VERSION}

  dobin ldoc-${LUA_VERSION}

  __doinsdir ldoc ${LUA_SCRIPTDIR}/ldoc

  dodoc COPYRIGHT* *.md *.rockspec

  # postinstall/preremove scripts setting alternatives
  local POSTINSTALL=./postinstall/lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}.sh
  local PREREMOVE=./preremove/lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}.sh

  mkdir -p ./postinstall
  mkdir -p ./preremove

  __script_postinstall_lua ${LUA_VERSION} ${LUA_PKG_NAME} <<_EOF > ${POSTINSTALL}
--slave /usr/bin/ldoc ldoc /usr/bin/ldoc-\${LUA_VERSION} \\
_EOF
  __script_preremove_lua ${LUA_VERSION} ${LUA_PKG_NAME} > ${PREREMOVE}

  insinto /etc/postinstall
  doins ${POSTINSTALL}
  insinto /etc/preremove
  doins ${PREREMOVE}
}

################################
src_test_lua() {
  cd ${B}/${LUA_VERSION}

  local TEST_LUA_PATH="$(lua_path_test ${LUA_VERSION})"
  local TEST_LUA_CPATH="$(lua_cpath_test ${LUA_VERSION})"

  local f
  local cmd

  chmod 755 ${B}/${LUA_VERSION}/ldoc-${LUA_VERSION}
  for f in tests tests/example tests/md-test; do
    cmd="cd $f && ${B}/${LUA_VERSION}/ldoc-${LUA_VERSION} --dir cdocs --testing . && echo OK"
    printf '%s\n' "${cmd}"
    LUA_PATH="${TEST_LUA_PATH}" \
    LUA_CPATH="${TEST_LUA_CPATH}" \
    /bin/sh -c "${cmd}"
    # cmd="cd $f && ${B}/${LUA_VERSION}/ldoc-${LUA_VERSION} --testing . && diff -s -r doc cdocs && echo OK"
    # printf '%s\n' "${cmd}"
    # LUA_PATH="${TEST_LUA_PATH}" \
    # LUA_CPATH="${TEST_LUA_CPATH}" \
    # /bin/sh -c "${cmd}"
  done
}

################################
